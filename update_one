#!/usr/bin/env python
"""update nuxeo"""
import sys
import argparse
import os
import requests
import json
import urlparse

def main(argv=None):
    """main"""
    parser = argparse.ArgumentParser( \
                          description='nuxeo metadata via REST API, one record')
    parser.add_argument('file', nargs=1, help="application/json+nxentity")
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--uid', help="update specific nuxeo uid")
    group.add_argument('--path', help="update specific nuxeo path")

    if argv is None:
        argv = parser.parse_args()

    # todo; add these defaults as parameters as well as env
    api_base = os.environ.get('NUXEO_REST_API', \
                              "http://localhost:8080/nuxeo/site/api/v1")
    api_auth = (os.environ.get('NUXEO_API_USER', "Administrator"),
                os.environ.get('NUXEO_API_PASS', "Administrator"))

    update_nuxeo_properties(api_base,
                            api_auth,
                            argv.file[0],
                            argv.uid,
                            argv.path)

def update_nuxeo_properties(api_base, api_auth, jfile, uid, path):
    """update nuxeo document properties"""
    json_data = open(jfile)
    data = json.load(json_data)
    use_uid = u''
    if uid:				# use uid supplied at command line
        use_uid = uid
    elif path:				# use path supplied at command line
        use_uid = get_uid(path, api_base, api_auth)
    else:				# use uid or path in the json file
        use_uid = data.get('uid') or \
                  get_uid(data.get('path'), api_base, api_auth)
    if not use_uid:			# no uid is found
        print "no uid found, specify --uid or --path"
        exit(1)
    url = api_base + "/id/" + use_uid + "/"
    headers = {'X-NXDocumentProperties':'ucldc_schema,dublincore',
               'Content-Type': 'application/json+nxentity'}
    # copy what we want from the input json into the payload
    payload = {}
    payload['uid'] = use_uid
    payload['properties'] = data['properties']
    res = requests.put(url,
                       data=json.dumps(payload),
                       auth=api_auth,
                       headers=headers)
    res.raise_for_status()
    print res.text

def get_uid(path, api_base, api_auth):
    """look up uid from the path"""
    url = urlparse.urljoin(api_base + "/", "path") + path
    res = requests.get(url, auth=api_auth)
    res.raise_for_status()
    return json.loads(res.text)['uid']

# main() idiom for importing into REPL for debugging
if __name__ == "__main__":
    sys.exit(main())
