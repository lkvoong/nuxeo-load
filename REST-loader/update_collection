#!/usr/bin/env python
"""update nuxeo from ucldc REST.xml file"""
import sys
import argparse
from lxml import etree
from pynux import utils
from pprint import pprint as pp
from requests.exceptions import HTTPError


def main(argv=None):
    parser = argparse.ArgumentParser(
        description='nuxeo metadata via REST API, from <REST> xml')
    parser.add_argument('file', nargs=1, help="YTH REST xml talnd export")
    parser.add_argument('--rcfile',
        default= '.pynuxrc',
        help="path to ConfigParser compatible ini file")

    if argv is None:
        argv = parser.parse_args()

    tree = etree.parse(argv.file[0])
    root = tree.getroot()
    documents = root.xpath('/REST/document')
    assert(documents), "%r should have an xpath '/REST/document' " \
        "containing ucldc metadata" % argv.file[0]

    nx = utils.Nuxeo(rcfile=argv.rcfile[0])

    for document in documents:
        item_dict = xml_to_dict(document)
        pp(item_dict)
        try:
            pp(nx.update_nuxeo_properties(item_dict, path=item_dict['path']))
        except HTTPError, e:
            assert unicode(e).startswith('404'), e
            print "{1} HTTPError: {0}".format(e, item_dict['path'])


def xml_to_dict(document):
    """convert XML to pyhon dict that matches the json"""
    properties = {}
    for property in document.xpath("schema/*"):
        key = property.xpath('name()')
        # simple value
        if not property.xpath('boolean(*)'):
            val = property.xpath('normalize-space()')
            if not val == '' and key != 'dc:filepath':
                properties[key] = property.text
        # array of simple
        elif property.xpath('item/text()') and not property.xpath('item/*'):
            val = []
            for item in property.xpath('item'):
                v = item.xpath('normalize-space()')
                if not v == '':
                    val.append(item.text)
            if len(val) > 0:
                properties[key] = val
        # array of dict
        elif property.xpath('item/*/text()'):
            val = []
            for item in property.xpath('item'):
                v = {}
                for el in item.xpath('*'):
                    k = el.xpath('name()')
                    if not el.xpath('normalize-space()') == '':
                        v[k] = el.text
                val.append(v)
            properties[key] = val

    # copy what we want from the input json into the payload
    payload = {}
    payload['path'] = "".join([
        "/",
        document.xpath('schema/*[local-name()="filepath"]')[0]
                .xpath('normalize-space()')
    ])
    payload['properties'] = properties
    return payload

# main() idiom for importing into REPL for debugging
if __name__ == "__main__":
    sys.exit(main())
